diff -uprNw -X linux-4.1.vanilla/Documentation/dontdiff linux-4.1.vanilla/kernel/sched/fair.c linux-4.1.overload-on-wakeup/kernel/sched/fair.c
--- linux-4.1.vanilla/kernel/sched/fair.c	2015-06-21 22:05:43.000000000 -0700
+++ linux-4.1.overload-on-wakeup/kernel/sched/fair.c	2015-11-05 01:30:19.693493606 -0800
@@ -4834,10 +4834,39 @@ select_task_rq_fair(struct task_struct *
 	int want_affine = 0;
 	int sync = wake_flags & WF_SYNC;
 
+    int _cpu;
+    u64 oldest_idle_stamp = 0xfffffffffffffff;
+    int oldest_idle_stamp_cpu;
+
 	if (sd_flag & SD_BALANCE_WAKE)
 		want_affine = cpumask_test_cpu(cpu, tsk_cpus_allowed(p));
 
 	rcu_read_lock();
+
+    if (!cpu_rq(prev_cpu)->nr_running)
+    {
+        new_cpu = prev_cpu;
+        goto unlock;
+    }
+
+    for_each_online_cpu(_cpu)
+    {
+        if (!cpumask_test_cpu(_cpu, tsk_cpus_allowed(p)) ||
+            cpu_rq(_cpu)->nr_running) continue;
+
+        if (cpu_rq(_cpu)->idle_stamp < oldest_idle_stamp)
+        {
+            oldest_idle_stamp = cpu_rq(_cpu)->idle_stamp;
+            oldest_idle_stamp_cpu = _cpu;
+        }
+    }
+
+    if (oldest_idle_stamp != 0xfffffffffffffff)
+    {
+         new_cpu = oldest_idle_stamp_cpu;
+         goto unlock;
+    }
+
 	for_each_domain(cpu, tmp) {
 		if (!(tmp->flags & SD_LOAD_BALANCE))
 			continue;
